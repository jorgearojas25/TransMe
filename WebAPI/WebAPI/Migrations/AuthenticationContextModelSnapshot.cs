// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Models;

namespace WebAPI.Migrations
{
    [DbContext(typeof(AuthenticationContext))]
    partial class AuthenticationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebAPI.Models.Categoria", b =>
                {
                    b.Property<string>("CategoriaID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nombre");

                    b.HasKey("CategoriaID");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("WebAPI.Models.Estacion", b =>
                {
                    b.Property<string>("EstacionesID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoordenadasEstacion");

                    b.Property<string>("NombreEstaciones");

                    b.Property<string>("RutaImagen");

                    b.Property<string>("TroncalesID");

                    b.HasKey("EstacionesID");

                    b.HasIndex("TroncalesID");

                    b.ToTable("Estacions");
                });

            modelBuilder.Entity("WebAPI.Models.Evento", b =>
                {
                    b.Property<string>("EventoID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Costo");

                    b.Property<string>("Descripcion");

                    b.Property<string>("EstacionesID");

                    b.Property<DateTime>("Fecha");

                    b.Property<TimeSpan>("Hora");

                    b.Property<string>("Lugar");

                    b.Property<string>("NombreEvento");

                    b.HasKey("EventoID");

                    b.HasIndex("EstacionesID");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("WebAPI.Models.EventoCategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoriaID");

                    b.Property<string>("EventoID");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaID");

                    b.HasIndex("EventoID");

                    b.ToTable("EventoCategorias");
                });

            modelBuilder.Entity("WebAPI.Models.Ruta", b =>
                {
                    b.Property<string>("RutasID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FinRuta");

                    b.Property<string>("InicioRuta");

                    b.Property<string>("NombreRuta");

                    b.HasKey("RutasID");

                    b.ToTable("Rutas");
                });

            modelBuilder.Entity("WebAPI.Models.TipoVagon", b =>
                {
                    b.Property<string>("TipoVagonesID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Longitud");

                    b.Property<string>("NombreVagon");

                    b.HasKey("TipoVagonesID");

                    b.ToTable("TipoVagons");
                });

            modelBuilder.Entity("WebAPI.Models.Troncal", b =>
                {
                    b.Property<string>("TroncalesID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FinalCoordenadas");

                    b.Property<string>("InicioCoordenadas");

                    b.Property<string>("NombreTroncales");

                    b.HasKey("TroncalesID");

                    b.ToTable("Troncals");
                });

            modelBuilder.Entity("WebAPI.Models.UsuarioCategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoriaID");

                    b.Property<string>("UsuarioID");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("UsuarioCategorias");
                });

            modelBuilder.Entity("WebAPI.Models.UsuarioEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventoID");

                    b.Property<string>("UsuarioID");

                    b.HasKey("Id");

                    b.HasIndex("EventoID");

                    b.HasIndex("UsuarioID");

                    b.ToTable("UsuarioEventos");
                });

            modelBuilder.Entity("WebAPI.Models.Vagon", b =>
                {
                    b.Property<string>("VagonesID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EstacionesID");

                    b.Property<string>("Longitud");

                    b.Property<string>("TipoVagonesID");

                    b.HasKey("VagonesID");

                    b.HasIndex("EstacionesID");

                    b.HasIndex("TipoVagonesID");

                    b.ToTable("Vagons");
                });

            modelBuilder.Entity("WebAPI.Models.VagonRuta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("RutasID");

                    b.Property<string>("RutasID1");

                    b.Property<string>("VagonesID");

                    b.HasKey("Id");

                    b.HasIndex("RutasID1");

                    b.HasIndex("VagonesID");

                    b.ToTable("VagonRutas");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(150)");

                    b.ToTable("ApplicationUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebAPI.Models.Estacion", b =>
                {
                    b.HasOne("WebAPI.Models.Troncal", "Troncales")
                        .WithMany()
                        .HasForeignKey("TroncalesID");
                });

            modelBuilder.Entity("WebAPI.Models.Evento", b =>
                {
                    b.HasOne("WebAPI.Models.Estacion", "Estaciones")
                        .WithMany()
                        .HasForeignKey("EstacionesID");
                });

            modelBuilder.Entity("WebAPI.Models.EventoCategoria", b =>
                {
                    b.HasOne("WebAPI.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaID");

                    b.HasOne("WebAPI.Models.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoID");
                });

            modelBuilder.Entity("WebAPI.Models.UsuarioCategoria", b =>
                {
                    b.HasOne("WebAPI.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaID");

                    b.HasOne("WebAPI.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID");
                });

            modelBuilder.Entity("WebAPI.Models.UsuarioEvento", b =>
                {
                    b.HasOne("WebAPI.Models.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("EventoID");

                    b.HasOne("WebAPI.Models.ApplicationUser", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioID");
                });

            modelBuilder.Entity("WebAPI.Models.Vagon", b =>
                {
                    b.HasOne("WebAPI.Models.Estacion", "Estaciones")
                        .WithMany()
                        .HasForeignKey("EstacionesID");

                    b.HasOne("WebAPI.Models.TipoVagon", "TipoVagones")
                        .WithMany()
                        .HasForeignKey("TipoVagonesID");
                });

            modelBuilder.Entity("WebAPI.Models.VagonRuta", b =>
                {
                    b.HasOne("WebAPI.Models.Ruta", "Rutas")
                        .WithMany()
                        .HasForeignKey("RutasID1");

                    b.HasOne("WebAPI.Models.Vagon", "Vagones")
                        .WithMany()
                        .HasForeignKey("VagonesID");
                });
#pragma warning restore 612, 618
        }
    }
}
